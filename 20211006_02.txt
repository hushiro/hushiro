Git と GitHub について

基本知識

	
	・バージョン管理システム
		バージョン管理システムとは、ファイルの変更を管理するシステムです。
		システム開発を行う場合、ソースコードを複数人が更新したり、新たな開発者が加わったりすることが少なくありません。
		その際にソースコードの更新履歴を正確に管理する、というのは非常に重要な意味を持ちます。
		ファイル追加や変更に関する履歴情報を管理することで
		・過去の変更箇所を確認する
		・特定時点の内容に戻す
	
		バージョン管理システムとしてGit以外にもMercurialやSubversionといったシステムが開発現場で用いられています。

	・Git
		バージョン管理の種類には①集中型　②分散型　があります。
		①集中型は特定の場所にあるリポジトリへの接続が必要な形態です。
		②分散型は個々人のPC上にリポジトリを置いて、開発を行うことが可能
		GitはもともとLinuxカーネルの開発者の間で作られた分散バージョン管理システムで、チーム開発の主流となっています。

	・リポジトリ
		バージョン管理されるファイルとそのための履歴情報を保管する領域のこと。
		リポジトリの配下でファイルやディレクトリを操作することになります。
		分散型のバージョン管理システムではこのリポジトリはまず個人で管理され、その後サーバーのリポジトリに集約させます。
		個々人のリポジトリのことを「ローカルリポジトリ」
		集約先のリポジトリを「リモートリポジトリ」と呼びます。

	・GitHub
		チームでリポジトリを共有して活用するためのWebサービスです。

１，GitとGitHubの基本的な使い方

	-1.Gitのインストール
	-2.Gitの初期設定
	-3.GitHubのアカウント作成
	-4.リモートリポジトリの作成
	-5.ローカルリポジトリの作成
	-6.ローカルリポジトリにコミットする
	-7.リモートリポジトリにプッシュする

1-1.Gitのインストール
	公式ページ　https://gitforwindows.org/　からインストーラをダウンロード
	インストーラをクリックしてインストール。
	インストールが完了すると。Git Bash が有効になっています。
	Git Bash を起動させるためには任意のフォルダ（ディレクトリ）の空白箇所を右クリック。表示されるメニューリストにGit Bash がノミネートされているのでそれを選択します。
	Git Bash はGitを操作するためのコマンドインターフェース
	Gitが正常にインストールされているか、以下のコマンドをGit Bash でたたき、GitのVersionを確認してみます
	***********
	$git --version
	***********

	バージョンが表示されたらインストール成功。
	#Picture [001_git_ver]

	
1-2.Gitの初期設定
	Gitのインストールが完了すると、コマンドが使えるようになります。
	まず最初に行うのはユーザー・e-Mail 登録
	ユーザー登録は以下のコマンドで行います。
	***********
	$git config --blobal user.name 〇〇〇
	***********

	メールアドレスは以下のコマンドで行います。
	***********
	$git config --global user.email 〇〇〇
	***********

	登録したら以下のコマンドで登録
	内容を確認します。
	***********
	$git config --list
	***********
	#Picture[002_git_list]

	git Bash はexit で終了します。

1-3.GitHubのアカウント作成
	Githubへのサービス登録をします。
	Githubは先ほどふれたようにチームでリポジトリを共有して活用するためのWebサービスです。

	GithubのWebサイトにアクセスします。

	アカウント作成メニューに入ります。
	アカウント作成に必要な情報は
	・email
	・User ID
	・pass word　　です。

1-4.リモートリポジトリの作成
	アカウント登録が完了したら、リポジトリを作成します。
	Webサイトにある「Create Repository」ボタンを押します。
	#Picture[003_github_repositorie]

	repository name には任意の名前を付けます。
	「public」か「private」を選択します。「public」は文字通り、作成したrepositoryがすべての人から参照可能になります。
	「private」はrepositoryを知る人にのみが参照可能になります。「private」は以前は有料でしたが2019年から無料になりました。
	「initialize this repository with a ReadMe」はチェックをOnにします。
	gitignore やlicence はNoneを選択してかまいません。
	new repository として作成したリポジトリの属性が表示されます。
	#Picture[004_github_repositorie]

	
1-5.ローカルリポジトリの作成
	ローカルリポジトリは１人のユーザーが自身のPC上に配置します。
	ローカルリポジトリである程度の作業を行ったら、リモートリポジトリにアップロードして変更履歴を共有する、というのがGitに代表される分散バージョン管理システムの作業イメージです。
	まず、任意の作業フォルダーを設定し、そのフォルダーのどこかを右クリックします。
	表示されるメニューリストにGit Bash があるのでそれを選択して起動します。
	こうするとリポジトリを作成するディレクトリとしてそのフォルダが選択された状態でGit Bashのターミナルが起動します。
	そこで
	**********
	$git init
	**********
	を叩きます。
	Initialized empty Git repository in C:\〇〇\〇〇　と表示されます。

	Git Bash を起動したフォルダに.git というフォルダができます。
	このフォルダにバージョン管理に必要なファイル一式が収納され、様々な情報が集積されます。
	※隠しフォルダなのでエクスプローラ表示で隠しファイルにチェックを入れること。

	**********
	$git status
	**********

	を叩くと起動フォルダに既に存在するフォルダとファイルが赤文字でリスト表示されます。
	そしてコメントとして
	use "git add <title>" to include in what will be commited 
	と表示される。
	#Picture[005_git_init status]


	これは赤文字のフォルダやファイルがまだコミット対象になっていないので「git add」でコミットリストに追加しなさい、という意味。
	コミットとはそのファイルをリポジトリで追跡対象として登録することです。

	指示に従い、git add を叩きます。

	************
	$git add [ファイル名]
	************

	#Picture[006_git_add]


1-6.ローカルリポジトリにコミットする
	add に成功すると　new file:[ファイル名]　として新しいファイルが追跡対象に加わります。
	こうして、新しいファイルや更新ファイルがaddで登録出来たら、ローカルリポジトリに記録します。
	この操作をCommit といいます。
	Commit を行う際に簡単なコメントを加える必要があります。そのコメント入力を含めて以下のコマンドを叩きます。

	****************
	$git commit -m "[コメント]"
	****************

	git commit でここまでgit add でコミット待ちにしていたファイルが仕掛リストから消え、リポジトリに加わってゆきます。
	コミットの履歴は
	****************
	$git log 
	****************

	で確認できます。

1-7.リモートリポジトリにプッシュする
	github のリモートリポジトリにプッシュするコマンド例はgithub のサイトに紹介されています。

	#Picture[007_github_commandref]

	すでにローカルにリポジトリがある場合とない場合、双方のコマンドレファレンスがあります。
	今回はすでに開設したようにローカル側にリポジトリを作成済。

	まず、対象となるリモートリポジトリを変数に入れます。

	****************
	$git remote add origin [URL/リポジトリ名.git] 
	****************

	これは今後の作業で頻繁に登場するリモートリポジトリをorigin という変数に代入するコマンドです。
	長いリモートリポジトリ名を都度指定する必要がなくなります。

	#Picture[008_git_remoteadd]

	なお、add するリモートリポジトリ名を間違えてしまった場合などは

	****************
	$git remote rm origin
	****************

	で、origin が初期化されます。
	origin の中身を確認したい場合は

	****************
	$git remote -v
	****************

	を叩きますが、この例では初期化済であるためレスポンスがありません。
	#Picture[009_git_remote rm]


	次に、このリポジトリにmain ブランチを作成します。

	****************
	$git branch -M main
	****************

	#Picture[010_git_branch M]

	メインブランチ名は「main」である必要はありませんが、現在はmain が推奨されている由。
	以前は「master」がよくつかわれていたそうです。

	リモートリポジトリにアクセスできていればmain ブランチが出来上がっているはずです。その場合、特にコメントは返ってきません。
	次にローカルブランチの内容をリモートにプッシュします。

	****************
	$git push -u origin main
	****************

	ここでorigin が出てきました。main は今しがた作成したメインブランチ名です。

	#Picture[011_git_push u]

	このコマンドを初めて使うと指定したgithub のusername を確認してきます。
	記入すると次いでパスワードの入力も求めてきます。両方とも入力して作業を続けます。
	プッシュが成功するとリポジトリの転送状況が表示されます。

	#Picture[012_git_pushsucseed]

	ここまで完了したら、github側のリモートリポジトリを確認してみます。
	githubのサイトで作成したリポジトリにはいり<>Code 欄をクリックします。
	リモート側のリポジトリにローカルで作成したファイル（ここでは[20211006_02.txt]が登録されていることが確認できます。

	#Picture[013_github_repositorie]
	


